from decorators import time_it

Prime_list = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,
              83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167,
              173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263,
              269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367,
              373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463,
              467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587,
              593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683,
              691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811]


def triangle_value(n):
    value = 0
    for i in range(1, n + 1):
        value = value + i

    return value


def prime_factors(number, prime_list):
    prime_factor_list = []
    index = 0
    finished = False

    for i in prime_list:
        prime_factor_list.append(0)
        can_be_divided = True

        while can_be_divided:
            if number / i == 1:
                finished = True
                can_be_divided = False
                prime_factor_list[index] += 1
            elif number % i == 0:
                prime_factor_list[index] += 1
                number /= i
            else:
                can_be_divided = False

        if finished:
            break

        index += 1

    return prime_factor_list


def n_of_divisors(factor_list):
    total = 1
    for i in factor_list:
       total *= (i+1)
    return total


class Problem:

    @time_it
    def solution(primes=Prime_list, n=500):

        """ Highly divisible triangular number
        The sequence of triangle numbers is generated by adding the natural numbers.
        So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
        The first ten terms would be:

        1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

        Let us list the factors of the first seven triangle numbers:

        1: 1
        3: 1,3
        6: 1,2,3,6
        10: 1,2,5,10
        15: 1,3,5,15
        21: 1,3,7,21
        28: 1,2,4,7,14,28

        We can see that 28 is the first triangle number to have over five divisors.

        What is the value of the first triangle number to have over five hundred divisors?
        """

        # === == === Solution === == ===  #

        divisors = 0
        number = 0
        biggest = 0

        while divisors < n:
            number = number + 1
            divisors = n_of_divisors(prime_factors(triangle_value(number), primes))
            if divisors > biggest:
                print(f'Biggest n of divisors now: {divisors}, from {number}')
                biggest = divisors

        return f'\nValue: {triangle_value(number)}, number of divisors: {divisors} and it is the {number}th number'


Problem.solution()
